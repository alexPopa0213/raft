syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.alex.raft";

package raft;

service RaftService {

    rpc appendEntries (AppendEntriesRequest) returns (AppendEntriesReply) {
    }

    rpc requestVote (RequestVoteRequest) returns (RequestVoteReply) {
    }

}

message AppendEntriesRequest {
    /*
    leader's term
        */
    int64 term = 1;
    /*
    so follower can redirect clients
        */
    string leaderId = 2;
    /*
    index of log entry immediately preceding new ones
        */
    int64 prevLogIndex = 3;
    /*
    term of prevLogIndex entry
        */
    int64 prevLogTerm = 4;
    /*
    log entries to store (empty for heartbeat; may send more than one for efficiency
        */
    repeated LogEntry entries = 5;
    /*
    leader’s commitIndex
        */
    int64 leaderCommitIndex = 6;
}

message AppendEntriesReply {
    /*
    currentTerm, for leader to update itself
        */
    int64 term = 1;
    /*
    true if follower contained entry matching prevLogIndex and prevLogTerm
        */
    bool success = 2;
}

message RequestVoteRequest {
    /*
     candidate's term
        */
    int64 term = 1;
    /*
      candidate requesting vote
        */
    string candidateId = 2;
    /*
      index of candidate’s last log entry
        */
    int64 lastLogIndex = 3;
    /*
    term of candidate’s last log entry
        */
    int64 lastLogTerm = 4;
}

message RequestVoteReply {
    /*
     currentTerm, for candidate to update itself
        */
    int64 term = 1;
    /*
    true means candidate received vote
        */
    bool voteGranted = 2;
}

message LogEntry {
    /*
    the term when entry was added
        */
    int64 term = 1;
    /*
    the entry index in the log
        */
    int32 index = 2;
    /*
    the command to be applied to the state machine
        */
    string command = 3;
}
